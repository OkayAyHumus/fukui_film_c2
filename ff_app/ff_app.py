# ff_app.py

import streamlit as st
import pandas as pd
import os
import shutil
import requests
import time
import uuid
import traceback
import logging
import subprocess
import sys
from io import BytesIO
from datetime import datetime
from PIL import Image, ImageEnhance
from pykakasi import kakasi

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload

from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager

# ========================
# ÂÆöÊï∞
# ========================
FC_BASE_URL = "https://fc.jl-db.jp"
CHROMEDRIVER_SECRET_KEY = "chromedriver_path"

# ========================
# „É≠„Ç∞Ë®≠ÂÆö
# ========================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# ========================
# SeleniumË®≠ÂÆöÈñ¢Êï∞
# ========================
def setup_chrome_options():
    """Streamlit CloudÁí∞Â¢É„Åß„ÅÆChromeË®≠ÂÆö"""
    options = Options()
    
    options.add_argument("--headless=new")  # <-- ËøΩÂä†ÔºàCloud„ÅßÂÆâÂÆö„Åô„ÇãÔºâ
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--disable-features=VizDisplayCompositor")
    options.add_argument("--disable-extensions")
    options.add_argument("--disable-background-networking")
    options.add_argument("--disable-background-timer-throttling")
    options.add_argument("--disable-backgrounding-occluded-windows")
    options.add_argument("--disable-renderer-backgrounding")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--remote-debugging-port=9222")
    options.add_argument("--disable-web-security")
    options.add_argument("--ignore-certificate-errors")

    return options

    
def get_chrome_driver_path():
    """ChromeDriver„ÅÆ„Éë„Çπ„ÇíÂèñÂæó"""
    try:
        import chromedriver_binary
        return chromedriver_binary.chromedriver_filename
    except Exception:
        import chromedriver_autoinstaller
        chromedriver_autoinstaller.install()
        return shutil.which("chromedriver")

def install_chrome_and_driver():
    try:
        import chromedriver_binary
        logger.info("chromedriver_binary successfully imported")
        return True
    except ImportError:
        # secrets „Å´ chromedriver_path „Åå„ÅÇ„Çã„ÅãÁ¢∫Ë™ç
        chrome_path = st.secrets.get("selenium", {}).get("chromedriver_path", "")
        if chrome_path and os.path.exists(chrome_path) and os.access(chrome_path, os.X_OK):
            logger.info(f"Using provided chromedriver at: {chrome_path}")
            return True
        else:
            logger.error(f"chromedriver path invalid or not executable: {chrome_path}")
            return False



# ========================
# Google Drive Êé•Á∂ö„Éª„Éï„Ç©„É´„ÉÄ‰ΩúÊàê
# ========================
def get_drive_service():
    try:
        creds = service_account.Credentials.from_service_account_info(
            st.secrets["gcp_service_account"]
        )
        return build("drive", "v3", credentials=creds)
    except Exception as e:
        logger.error(f"Google Drive service initialization failed: {e}")
        raise

def create_timestamped_folder(service, parent_id):
    try:
        name = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        meta = {"name": name,
                "mimeType": "application/vnd.google-apps.folder",
                "parents": [parent_id]}
        fid = service.files().create(body=meta, fields="id").execute()["id"]
        logger.info(f"Created folder: {name} (ID: {fid})")
        return fid, name
    except Exception as e:
        logger.error(f"Failed to create folder: {e}")
        raise

# ========================
# users.csv „ÅÆË™≠„ÅøËæº„Åø
# ========================
@st.cache_data
def load_users(_service, admin_folder_id):
    try:
        q = f"'{admin_folder_id}' in parents and name='users.csv' and mimeType='text/csv'"
        files = _service.files().list(q=q, fields="files(id)").execute().get("files", [])
        if not files:
            logger.warning("users.csv not found")
            return None, None
        
        fid = files[0]["id"]
        fh = BytesIO()
        
        from googleapiclient.http import MediaIoBaseDownload
        downloader = MediaIoBaseDownload(fh, _service.files().get_media(fileId=fid))
        done = False
        while not done:
            _, done = downloader.next_chunk()
        fh.seek(0)
        
        logger.info("users.csv loaded successfully")
        return pd.read_csv(fh), fid
    except Exception as e:
        logger.error(f"Failed to load users.csv: {e}")
        return None, None

# ========================
# „É≠„Ç∞„Ç§„É≥Ê©üËÉΩ
# ========================
def login(users_df):
    st.sidebar.header("üîê „É≠„Ç∞„Ç§„É≥")
    if "username" in st.session_state:
        st.sidebar.success(f"„É≠„Ç∞„Ç§„É≥‰∏≠: {st.session_state['username']}")
        if st.sidebar.button("„É≠„Ç∞„Ç¢„Ç¶„Éà"):
            for k in ("username", "folder_id", "is_admin"): 
                st.session_state.pop(k, None)
            st.sidebar.info("„É≠„Ç∞„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„ÄÇ")
        return
    
    u = st.sidebar.text_input("„É¶„Éº„Ç∂„ÉºÂêç", key="login_user")
    p = st.sidebar.text_input("„Éë„Çπ„ÉØ„Éº„Éâ", type="password", key="login_pass")
    
    if st.sidebar.button("„É≠„Ç∞„Ç§„É≥"):
        try:
            df = users_df.copy()
            df["username"] = df["username"].str.strip()
            df["password"] = df["password"].str.strip()
            m = df[(df["username"] == u.strip()) & (df["password"] == p.strip())]
            
            if not m.empty:
                st.session_state["username"] = u.strip()
                st.session_state["folder_id"] = m.iloc[0]["folder_id"]
                st.session_state["is_admin"] = (u.strip() == "admin")
                st.sidebar.success("„É≠„Ç∞„Ç§„É≥ÊàêÂäü")
                logger.info(f"User logged in: {u.strip()}")
            else:
                st.sidebar.error("Ë™çË®ºÂ§±Êïó")
                logger.warning(f"Login failed for user: {u.strip()}")
        except Exception as e:
            st.sidebar.error(f"„É≠„Ç∞„Ç§„É≥„Ç®„É©„Éº: {e}")
            logger.error(f"Login error: {e}")

# ========================
# Geocoding + „Åµ„Çä„Åå„Å™Â§âÊèõ
# ========================
def search_location_info(place_name):
    try:
        key = st.secrets["google_maps"]["api_key"]
        url = f"https://maps.googleapis.com/maps/api/geocode/json?address={place_name}&language=ja&key={key}"
        response = requests.get(url, timeout=10)
        data = response.json()
        
        if data.get("status") != "OK":
            logger.warning(f"Geocoding failed for {place_name}: {data.get('status')}")
            return "", "", ""
        
        r = data["results"][0]
        logger.info(f"Geocoding successful for {place_name}")
        return r["formatted_address"], r["geometry"]["location"]["lat"], r["geometry"]["location"]["lng"]
    except Exception as e:
        logger.error(f"Geocoding error: {e}")
        return "", "", ""

def convert_to_furigana(text):
    try:
        k = kakasi()
        k.setMode("H", "a")
        k.setMode("K", "a") 
        k.setMode("J", "a")
        result = k.getConverter().do(text)
        logger.info(f"Furigana conversion: {text} -> {result}")
        return result
    except Exception as e:
        logger.error(f"Furigana conversion error: {e}")
        return text

# ========================
# ÁîªÂÉèË£úÊ≠£„ÉªÂúßÁ∏Æ
# ========================
def enhance_image(img, b, c, col):
    try:
        img = ImageEnhance.Brightness(img).enhance(b)
        img = ImageEnhance.Contrast(img).enhance(c)
        img = ImageEnhance.Color(img).enhance(col)
        return img
    except Exception as e:
        logger.error(f"Image enhancement error: {e}")
        return img

def compress_image(img, max_bytes):
    try:
        buf = BytesIO()
        q = 95
        while q >= 10:
            buf.seek(0)
            buf.truncate()
            img.save(buf, format="JPEG", quality=q, optimize=True)
            if buf.tell() <= max_bytes:
                logger.info(f"Image compressed to {buf.tell()} bytes at quality {q}")
                return buf
            q -= 5
        logger.warning("Could not compress image to target size")
        return None
    except Exception as e:
        logger.error(f"Image compression error: {e}")
        return None

# ========================
# FC„Çµ„Ç§„ÉàËá™ÂãïÁôªÈå≤
# ========================

import os

# Streamlit Cloud ‰∏ä„Åß chromedriver „Å´ÂÆüË°åÊ®©Èôê„ÇíÂº∑Âà∂‰ªò‰∏é
chromedriver_path = st.secrets["selenium"]["chromedriver_path"]
if os.path.exists(chromedriver_path):
    os.chmod(chromedriver_path, 0o755)







def run_fc_registration(user, pwd, headless, session_dir, metadata):
    logger.info("Starting FC registration process")
    
    # ChromeÁí∞Â¢É„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
    if not install_chrome_and_driver():
        raise Exception("Failed to setup Chrome environment")
    
    options = setup_chrome_options()
    if not headless:
        options.remove_argument("--headless")
    
    driver_path = get_chrome_driver_path()
    logger.info(f"Using ChromeDriver path: {driver_path}")
    
    driver = None
    try:
        # Chrome„Éâ„É©„Ç§„Éê„Éº„ÅÆËµ∑Âãï
        # „Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÊ∏à„Åø„ÅÆ chromedriver „Çí‰Ωø„ÅÜ
        driver_path = st.secrets["selenium"]["chromedriver_path"]
        service = ChromeService(executable_path=driver_path)
        driver = webdriver.Chrome(service=service, options=options)

        wait = WebDriverWait(driver, 40)
        
        logger.info("Chrome driver started successfully")
        
        # 1) „É≠„Ç∞„Ç§„É≥
        logger.info("Step 1: Logging in to FC site")
        driver.get(f"{FC_BASE_URL}/login.php")
        
        login_id_element = wait.until(EC.visibility_of_element_located((By.NAME, "login_id")))
        login_id_element.send_keys(user)
        
        password_element = driver.find_element(By.NAME, "password")
        password_element.send_keys(pwd)
        
        login_button = driver.find_element(By.NAME, "login")
        login_button.click()
        
        logger.info("Login completed")
        
        # 2) Êñ∞Ë¶èÁôªÈå≤„Éö„Éº„Ç∏„Å∏
        logger.info("Step 2: Navigating to registration page")
        driver.get(f"{FC_BASE_URL}/location/?mode=detail&id=0")
        wait.until(EC.presence_of_element_located((By.NAME, "name_ja")))
        
        # 2.1) ÁîªÂÉèÁôªÈå≤„É¢„Éº„ÉÄ„É´„ÇíÈñã„ÅÑ„Å¶ÂÖ®ÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
        logger.info("Step 2.1: Opening image upload modal")
        btn_add = wait.until(EC.element_to_be_clickable(
            (By.CSS_SELECTOR, "button[data-toggle='modal'][data-target='#modal-img-add']")
        ))
        driver.execute_script("arguments[0].scrollIntoView(true);", btn_add)
        driver.execute_script("arguments[0].click();", btn_add)
        
        file_input = wait.until(EC.presence_of_element_located((By.ID, "InputFile")))
        
        # ÂúßÁ∏ÆÊ∏à„ÅøÁîªÂÉè„Çí„Åô„Åπ„Å¶ÈÅ∏Êäû
        paths = [
            os.path.abspath(os.path.join(session_dir, fn))
            for fn in os.listdir(session_dir)
            if fn.startswith("compressed_") and fn.lower().endswith((".jpg", ".jpeg", ".png"))
        ]
        
        logger.info(f"Uploading {len(paths)} images")
        file_input.send_keys("\n".join(paths))
        
        # „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„É™„Çπ„ÉàÊï∞„ÇíÂæÖÊ©ü
        expected_count = len(paths)
        wait.until(lambda d: len(d.find_elements(By.CSS_SELECTOR, "#files li.media")) >= expected_count)
        
        # ÂÆå‰∫Ü„Çπ„ÉÜ„Éº„Çø„Çπ„ÅåÊèÉ„ÅÜ„Åæ„ÅßÁÑ°Âà∂Èôê„É´„Éº„Éó
        logger.info("Waiting for upload completion")
        while True:
            bars = driver.find_elements(By.CSS_SELECTOR, "#files li.media .progress-bar")
            statuses = driver.find_elements(By.CSS_SELECTOR, "#files li.media .status")
            if (len(bars) >= expected_count and len(statuses) >= expected_count
                and all(bar.get_attribute("aria-valuenow") == "100" for bar in bars)
                and all("Complete" in status.text for status in statuses)):
                break
            time.sleep(0.5)
        
        logger.info("Image upload completed")
        
        # „É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
        close_add = driver.find_element(By.CSS_SELECTOR, "#modal-img-add button[data-dismiss='modal']")
        driver.execute_script("arguments[0].click();", close_add)
        
        # 3) Âú∞ÂêçÔºè„Åµ„Çä„Åå„Å™ÔºèÊâÄÂú®Âú∞ ÂÖ•Âäõ
        logger.info("Step 3: Filling location information")
        for field_name, value in [
            ("name_ja", metadata.get("place", "")),
            ("name_kana", metadata.get("furigana", "")),
            ("place_ja", metadata.get("address", ""))
        ]:
            el = driver.find_element(By.NAME, field_name)
            driver.execute_script("arguments[0].scrollIntoView(true);", el)
            el.clear()
            el.send_keys(value)
            logger.info(f"Filled {field_name}: {value}")
        
        # 4) Á∑ØÂ∫¶ÁµåÂ∫¶ÂèñÂæó
        logger.info("Step 4: Getting coordinates")
        btn_geo = driver.find_element(By.ID, "btn-g-search")
        driver.execute_script("arguments[0].scrollIntoView(true);", btn_geo)
        driver.execute_script("arguments[0].click();", btn_geo)
        wait.until(lambda d: d.find_element(By.NAME, "lat").get_attribute("value") != "")
        
        # 5) Ê¶ÇË¶Å
        logger.info("Step 5: Filling description")
        desc_el = driver.find_element(By.ID, "entry-description-ja")
        driver.execute_script("arguments[0].scrollIntoView(true);", desc_el)
        desc_el.clear()
        desc_el.send_keys(metadata.get("description", ""))
        
        # 6) ÈùûÂÖ¨Èñã„Éï„É©„Ç∞
        logger.info("Step 6: Setting privacy flag")
        sel = driver.find_element(By.NAME, "activated")
        for opt in sel.find_elements(By.TAG_NAME, "option"):
            if opt.get_attribute("value") == "0":
                driver.execute_script("arguments[0].scrollIntoView(true);", opt)
                opt.click()
                break
        
        # 7) „É°„Ç§„É≥ÁîªÂÉèÈÅ∏Êäû
        main_file = metadata.get("main_file")
        if main_file:
            logger.info(f"Step 7: Setting main image: {main_file}")
            btn_main = wait.until(EC.element_to_be_clickable((By.ID, "select-main-img")))
            driver.execute_script("arguments[0].scrollIntoView(true);", btn_main)
            driver.execute_script("arguments[0].click();", btn_main)
            wait.until(EC.visibility_of_element_located((By.ID, "modal-img-select")))
            time.sleep(0.5)
            
            for box in driver.find_elements(By.CSS_SELECTOR, "#modal-img-select .select-img-box"):
                if main_file in box.text:
                    link = box.find_element(By.CSS_SELECTOR, "a.select-img-vw")
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", link)
                    time.sleep(0.5)
                    driver.execute_script("arguments[0].click();", link)
                    break
            time.sleep(8)
        
        # 8) „Çµ„ÉñÁîªÂÉèÈÅ∏Êäû
        sub_files = metadata.get("sub_files") or []
        if sub_files:
            logger.info(f"Step 8: Setting sub images: {len(sub_files)} files")
            for fname in sub_files:
                logger.info(f"Processing sub image: {fname}")
                
                # „ÄåÁîªÂÉèÈÅ∏Êäû„Äç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„É¢„Éº„ÉÄ„É´Ë°®Á§∫
                btn_sub = wait.until(EC.element_to_be_clickable((By.ID, "select-sub-img")))
                driver.execute_script("arguments[0].scrollIntoView(true);", btn_sub)
                btn_sub.click()
                time.sleep(5)
                
                # „É¢„Éº„ÉÄ„É´„ÅåÈñã„Åã„Çå„ÄÅÊ§úÁ¥¢Áî®ÂÖ•ÂäõÊ¨Ñ„ÅåË°®Á§∫„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
                wait.until(EC.visibility_of_element_located((By.ID, "modal-img-select")))
                time.sleep(5)
                
                # Ê§úÁ¥¢Ë™û„ÇíÂÖ•Âäõ
                input_search = wait.until(EC.presence_of_element_located((By.ID, "search-file-name")))
                driver.execute_script("arguments[0].scrollIntoView(true);", input_search)
                input_search.clear()
                input_search.send_keys(fname)
                
                # Ê§úÁ¥¢ÂÆüË°å„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
                btn_search = driver.find_element(By.ID, "search-img")
                driver.execute_script("arguments[0].scrollIntoView(true);", btn_search)
                btn_search.click()
                
                # Ê§úÁ¥¢ÁµêÊûú„ÅåËøî„Å£„Å¶„Åè„Çã„ÅÆ„ÇíÂæÖÊ©ü
                wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, "#modal-img-select .select-img-box")))
                time.sleep(8)
                
                # ‰∏Ä‰ª∂ÁõÆ„ÅÆ„ÄåÈÅ∏Êäû„Äç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
                first_box = driver.find_elements(By.CSS_SELECTOR, "#modal-img-select .select-img-box")[0]
                link = first_box.find_element(By.CSS_SELECTOR, "a.select-img-vw")
                driver.execute_script("arguments[0].scrollIntoView(true);", link)
                link.click()
                
                # Ê§úÁ¥¢Ë™û„Çí„ÇØ„É™„Ç¢„Åó„Å¶„ÄÅÊ¨°„ÅÆÂë®Ëæ∫ÁîªÂÉè„ÅÆÊ§úÁ¥¢„Å´ÂÇô„Åà„Çã
                input_search.clear()
                time.sleep(5)
        
        # 9) „Ç´„ÉÜ„Ç¥„É™ÈÅ∏Êäû
        logger.info("Step 9: Setting category")
        btn_cat = wait.until(EC.element_to_be_clickable((By.ID, "select-category-btn")))
        time.sleep(3)
        driver.execute_script("arguments[0].scrollIntoView(true);", btn_cat)
        btn_cat.click()
        time.sleep(8)
        wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, "input.category-modal-select")))
        time.sleep(3)
        
        cbs = driver.find_elements(By.CSS_SELECTOR, "input.category-modal-select")
        target = next((cb for cb in cbs if cb.get_attribute("value") == "133"), None)
        if not target and cbs:
            target = cbs[0]
        if target:
            driver.execute_script("arguments[0].scrollIntoView(true);", target)
            driver.execute_script("arguments[0].click();", target)
        
        # 10) ‰øùÂ≠ò
        logger.info("Step 10: Saving registration")
        save_btn = wait.until(EC.element_to_be_clickable((By.ID, "save-btn")))
        driver.execute_script("arguments[0].scrollIntoView(true);", save_btn)
        driver.execute_script("arguments[0].click();", save_btn)
        wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".alert-success")))
        
        logger.info("FC registration completed successfully")
        
    except Exception as e:
        logger.error(f"FC registration error: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise
    
    finally:
        if driver:
            if headless:
                driver.quit()
                logger.info("Chrome driver closed")
            else:
                logger.info("„Éò„ÉÉ„Éâ„É¨„ÇπOFF „ÅÆ„Åü„ÇÅ„ÄÅ„Éñ„É©„Ç¶„Ç∂„ÅåÈñã„ÅÑ„Åü„Åæ„Åæ„Åß„Åô„ÄÇ")

# ========================
# „É≠„Ç∞Ë°®Á§∫„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
# ========================
def show_logs():
    """„É≠„Ç∞„ÇíË°®Á§∫„Åô„ÇãStreamlit„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà"""
    st.sidebar.header("üìã „É≠„Ç∞")
    
    # „É≠„Ç∞„É¨„Éô„É´ÈÅ∏Êäû
    log_level = st.sidebar.selectbox(
        "„É≠„Ç∞„É¨„Éô„É´",
        ["INFO", "WARNING", "ERROR"],
        index=0
    )
    
    # „É≠„Ç∞„ÅÆÂèñÂæó„Å®Ë°®Á§∫ÔºàÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅ„É≠„Ç∞„Éè„É≥„Éâ„É©„Éº„Åã„Çâ„É≠„Ç∞„ÇíÂèñÂæóÔºâ
    if st.sidebar.button("„É≠„Ç∞„ÇíÊõ¥Êñ∞"):
        st.sidebar.success("„É≠„Ç∞„ÅåÊõ¥Êñ∞„Åï„Çå„Åæ„Åó„Åü")

# ========================
# „Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±Ë°®Á§∫
# ========================
def show_system_info():
    """„Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±„ÇíË°®Á§∫"""
    with st.expander("üîß „Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±"):
        st.write("**Python Version:**", sys.version)
        st.write("**OS:**", os.name)
        
        # ChromeÈñ¢ÈÄ£„ÅÆÊÉÖÂ†±
        try:
            import chromedriver_binary
            st.write("**ChromeDriver Binary:**", "‚úÖ Installed")
            st.write("**ChromeDriver Path:**", chromedriver_binary.chromedriver_filename)
        except ImportError:
            st.write("**ChromeDriver Binary:**", "‚ùå Not installed")
        
        # Áí∞Â¢ÉÂ§âÊï∞
        st.write("**Environment Variables:**")
        for key in ["DISPLAY", "CHROME_BIN", "CHROMEDRIVER_PATH"]:
            value = os.environ.get(key, "Not set")
            st.write(f"  - {key}: {value}")

# ========================
# „É°„Ç§„É≥
# ========================
def main():
    st.set_page_config(page_title="ÁîªÂÉèÂúßÁ∏ÆÔºãÂú∞ÂêçÊÉÖÂ†±ÂèñÂæó", layout="wide")
    st.title("üì∑ ÁîªÂÉèÂúßÁ∏ÆÔºãÂú∞ÂêçÊÉÖÂ†±ÂèñÂæó„Ç¢„Éó„É™")
    
    # „Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±Ë°®Á§∫
    show_system_info()
    
    # „É≠„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
    show_logs()
    
    try:
        # Drive & users
        logger.info("Initializing Google Drive service")
        service = get_drive_service()
        users_df, _ = load_users(service, st.secrets["folders"]["admin_folder_id"])
        
        if users_df is None:
            st.error("users.csv „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
            logger.error("users.csv not found")
            return
        
        login(users_df)
        if "username" not in st.session_state: 
            st.stop()
        
        # FC-site Ë®≠ÂÆö
        st.sidebar.header("‚öôÔ∏è FC„Çµ„Ç§„ÉàË®≠ÂÆö")
        fc_user = st.sidebar.text_input("FC „É≠„Ç∞„Ç§„É≥ID")
        fc_pass = st.sidebar.text_input("FC „Éë„Çπ„ÉØ„Éº„Éâ", type="password")
        headless = st.sidebar.checkbox("„Éò„ÉÉ„Éâ„É¨„ÇπÂÆüË°å", value=True)
        
        # Drive ÁîªÂÉè„Éï„Ç©„É´„ÉÄ
        folder_id = st.text_input("üìÅ Google Drive „Éï„Ç©„É´„ÉÄID„ÇíÂÖ•Âäõ")
        if not folder_id: 
            st.stop()
        
        logger.info(f"Loading images from folder: {folder_id}")
        files = service.files().list(
            q=f"'{folder_id}' in parents and mimeType contains 'image/' and trashed=false",
            fields="files(id,name)"
        ).execute().get("files", [])
        
        if not files: 
            st.warning("ÁîªÂÉè„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
            logger.warning("No images found in the specified folder")
            return
        
        logger.info(f"Found {len(files)} images")
        
        # Âü∫Êú¨ÊÉÖÂ†±
        place = st.text_input("Âú∞ÂêçÔºàÊº¢Â≠óÔºâ")
        furigana = st.text_input("„Åµ„Çä„Åå„Å™")
        desc = st.text_area("Ê¶ÇË¶Å", "")
        max_kb = st.sidebar.number_input("üîß ÂúßÁ∏ÆÂæåÊúÄÂ§ßKB", 50, 2048, 2000)
        max_bytes = max_kb * 1024
        
        # ÁîªÂÉè„Éó„É¨„Éì„É•„ÉºÔºÜË®≠ÂÆö
        st.header("üñºÔ∏è ÁîªÂÉèÈÅ∏Êäû„ÉªË£úÊ≠£")
        select_all = st.checkbox("„Åô„Åπ„Å¶ÈÅ∏Êäû")
        settings = {}
        os.makedirs("data", exist_ok=True)
        
        for f in files:
            fid, name = f["id"], f["name"]
            path = os.path.join("data", name)
            
            try:
                with open(path, "wb") as fp: 
                    fp.write(service.files().get_media(fileId=fid).execute())
                img = Image.open(path)
                
                b = st.slider(f"Êòé„Çã„Åï[{name}]", 0.5, 2.0, 1.2, 0.1, key=f"b_{name}")
                c = st.slider(f"„Ç≥„É≥„Éà„É©„Çπ„Éà[{name}]", 0.5, 2.0, 1.2, 0.1, key=f"c_{name}")
                col = st.slider(f"ÂΩ©Â∫¶[{name}]", 0.5, 2.0, 1.3, 0.1, key=f"col_{name}")
                
                en = enhance_image(img.copy(), b, c, col)
                c1, c2 = st.columns(2)
                with c1: 
                    st.image(img, caption="ÂÖÉ", use_container_width=True)
                with c2: 
                    st.image(en, caption="Ë£úÊ≠£", use_container_width=True)
                
                main = st.checkbox("„É°„Ç§„É≥„Åß‰Ωø„ÅÜ", key=f"main_{name}")
                sel = st.checkbox("ÈÅ∏Êäû", key=f"sel_{name}", value=select_all)
                settings[name] = {"b": b, "c": c, "col": col, "main": main, "sel": sel}
                
            except Exception as e:
                st.error(f"ÁîªÂÉè„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {name} - {e}")
                logger.error(f"Failed to load image {name}: {e}")
        
        if st.button("üîç ÂúßÁ∏Æ‚ÜíÊ§úÁ¥¢‚ÜíDrive‰øùÂ≠ò‚ÜíËá™ÂãïÁôªÈå≤"):
            try:
                # „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # ‰∏ÄÊôÇ„Éá„Ç£„É¨„ÇØ„Éà„É™
                session_dir = f"output/{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                os.makedirs(session_dir, exist_ok=True)
                logger.info(f"Created session directory: {session_dir}")
                
                # ‰ΩèÊâÄÊ§úÁ¥¢
                status_text.text("‰ΩèÊâÄÊÉÖÂ†±„ÇíÊ§úÁ¥¢‰∏≠...")
                progress_bar.progress(10)
                addr, lat, lng = search_location_info(place)
                metadata = {
                    "place": place, 
                    "furigana": furigana, 
                    "description": desc,
                    "address": addr, 
                    "lat": lat, 
                    "lng": lng
                }
                
                # ÂúßÁ∏ÆÔºÜ„Éï„Ç°„Ç§„É´„É™„Çπ„Éà
                status_text.text("ÁîªÂÉè„ÇíÂúßÁ∏Æ‰∏≠...")
                progress_bar.progress(30)
                sub_files = []
                main_file = None
                
                for f in files:
                    name = f["name"]
                    s = settings[name]
                    if not s["sel"]: 
                        continue
                    
                    img = Image.open(os.path.join("data", name))
                    en = enhance_image(img, s["b"], s["c"], s["col"])
                    buf = compress_image(en, max_bytes)
                    out = f"compressed_{name}"
                    
                    if buf:
                        with open(os.path.join(session_dir, out), "wb") as fp: 
                            fp.write(buf.getvalue())
                        sub_files.append(out)
                        if s["main"]: 
                            main_file = out
                        logger.info(f"Compressed image: {name} -> {out}")
                
                metadata["main_file"] = main_file
                metadata["sub_files"] = sub_files
                
                # CSV ‰ΩúÊàê
                status_text.text("„É°„Çø„Éá„Éº„Çø„Çí‰ΩúÊàê‰∏≠...")
                progress_bar.progress(50)
                csv_path = os.path.join(session_dir, "metadata.csv")
                pd.DataFrame([metadata]).to_csv(csv_path, index=False)
                logger.info("Metadata CSV created")
                
                # Google Drive „Å´„ÉÅ„É£„É≥„ÇØ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
                status_text.text("Google Drive„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠...")
                progress_bar.progress(60)
                new_fid, new_name = create_timestamped_folder(service, folder_id)
                st.info(f"‚ñ∂ „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÖà: {new_name}")
                
                files_to_upload = os.listdir(session_dir)
                for i, fn in enumerate(files_to_upload):
                    fp = os.path.join(session_dir, fn)
                    mime = "image/jpeg" if fn.lower().endswith((".jpg", ".jpeg")) else "text/csv"
                    
                    try:
                        media = MediaIoBaseUpload(
                            open(fp, "rb"), 
                            mimetype=mime,
                            resumable=True, 
                            chunksize=1024*1024
                        )
                        req = service.files().create(
                            body={"name": fn, "parents": [new_fid]},
                            media_body=media
                        )
                        
                        uploaded = False
                        with st.spinner(f"Uploading {fn}..."):
                            while not uploaded:
                                status, resp = req.next_chunk()
                                if status:
                                    progress = int(status.progress() * 100)
                                    st.write(f"  {fn}: {progress}%")
                                if resp:
                                    uploaded = True
                        
                        st.success(f"  ‚úÖ {fn} uploaded")
                        logger.info(f"Uploaded file: {fn}")
                        
                        # „Éó„É≠„Ç∞„É¨„Çπ„Éê„ÉºÊõ¥Êñ∞
                        upload_progress = 60 + (i + 1) / len(files_to_upload) * 20
                        progress_bar.progress(int(upload_progress))
                        
                    except Exception as e:
                        st.error(f"‚ùå „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂ§±Êïó: {fn} - {e}")
                        logger.error(f"Upload failed for {fn}: {e}")
                
                st.success("üéâ Drive „Å∏„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü")
                
                # FC Ëá™ÂãïÁôªÈå≤
                status_text.text("FC„Çµ„Ç§„Éà„Å´Ëá™ÂãïÁôªÈå≤‰∏≠...")
                progress_bar.progress(80)
                
                if not fc_user or not fc_pass:
                    st.warning("‚ö†Ô∏è FC„Çµ„Ç§„Éà„ÅÆ„É≠„Ç∞„Ç§„É≥ÊÉÖÂ†±„ÅåÂÖ•Âäõ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇËá™ÂãïÁôªÈå≤„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô„ÄÇ")
                    logger.warning("FC login credentials not provided, skipping auto-registration")
                else:
                    try:
                        run_fc_registration(fc_user, fc_pass, headless, session_dir, metadata)
                        st.success("‚úÖ FC„Çµ„Ç§„ÉàËá™ÂãïÁôªÈå≤ÂÆå‰∫Ü")
                        logger.info("FC registration completed successfully")
                    except Exception as e:
                        st.error(f"‚ùå Ëá™ÂãïÁôªÈå≤‰∏≠„Å´„Ç®„É©„ÉºÁô∫Áîü: {e}")
                        logger.error(f"FC registration failed: {e}")
                        logger.error(f"Traceback: {traceback.format_exc()}")
                        
                        # „Ç®„É©„ÉºË©≥Á¥∞„Çí„É¶„Éº„Ç∂„Éº„Å´Ë°®Á§∫
                        with st.expander("„Ç®„É©„ÉºË©≥Á¥∞"):
                            st.code(traceback.format_exc())
                
                # ÂÆå‰∫Ü
                progress_bar.progress(100)
                status_text.text("Âá¶ÁêÜÂÆå‰∫ÜÔºÅ")
                
                # „É≠„Éº„Ç´„É´ÂâäÈô§
                try:
                    shutil.rmtree(session_dir)
                    logger.info(f"Cleaned up session directory: {session_dir}")
                except Exception as e:
                    logger.warning(f"Failed to cleanup session directory: {e}")
                
            except Exception as e:
                st.error(f"‚ùå Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
                logger.error(f"Main process error: {e}")
                logger.error(f"Traceback: {traceback.format_exc()}")
                
                # „Ç®„É©„ÉºË©≥Á¥∞„Çí„É¶„Éº„Ç∂„Éº„Å´Ë°®Á§∫
                with st.expander("„Ç®„É©„ÉºË©≥Á¥∞"):
                    st.code(traceback.format_exc())
    
    except Exception as e:
        st.error(f"‚ùå „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÂàùÊúüÂåñ„Ç®„É©„Éº: {e}")
        logger.error(f"Application initialization error: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        # „Ç®„É©„ÉºË©≥Á¥∞„Çí„É¶„Éº„Ç∂„Éº„Å´Ë°®Á§∫
        with st.expander("„Ç®„É©„ÉºË©≥Á¥∞"):
            st.code(traceback.format_exc())

if __name__ == "__main__":
    main()
