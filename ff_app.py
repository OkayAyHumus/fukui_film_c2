# ff_app.py

import streamlit as st
import pandas as pd
import os
import shutil
import requests
import time
import uuid
import traceback
from io import BytesIO
from datetime import datetime
from PIL import Image, ImageEnhance
from pykakasi import kakasi

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload

from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# ========================
# ÂÆöÊï∞
# ========================
FC_BASE_URL = "https://fc.jl-db.jp"
CHROMEDRIVER_SECRET_KEY = "chromedriver_path"  # st.secrets["selenium"][CHROMEDRIVER_SECRET_KEY]

# ========================
# Google Drive Êé•Á∂ö„Éª„Éï„Ç©„É´„ÉÄ‰ΩúÊàê
# ========================
def get_drive_service():
    creds = service_account.Credentials.from_service_account_info(
        st.secrets["gcp_service_account"]
    )
    return build("drive", "v3", credentials=creds)

def create_timestamped_folder(service, parent_id):
    name = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    meta = {"name": name,
            "mimeType": "application/vnd.google-apps.folder",
            "parents":[parent_id]}
    fid = service.files().create(body=meta, fields="id").execute()["id"]
    return fid, name

# ========================
# users.csv „ÅÆË™≠„ÅøËæº„Åø
# ========================
@st.cache_data
def load_users(_service, admin_folder_id):
    q = f"'{admin_folder_id}' in parents and name='users.csv' and mimeType='text/csv'"
    files = _service.files().list(q=q, fields="files(id)").execute().get("files",[])
    if not files:
        return None, None
    fid = files[0]["id"]
    fh = BytesIO()
    downloader = _service.files().get_media(fileId=fid)
    downloader = _service._http.request  # workaround for stubs
    # actually use MediaIoBaseDownload
    from googleapiclient.http import MediaIoBaseDownload
    downloader = MediaIoBaseDownload(fh, _service.files().get_media(fileId=fid))
    done = False
    while not done:
        _, done = downloader.next_chunk()
    fh.seek(0)
    return pd.read_csv(fh), fid

# ========================
# „É≠„Ç∞„Ç§„É≥Ê©üËÉΩ
# ========================
def login(users_df):
    st.sidebar.header("üîê „É≠„Ç∞„Ç§„É≥")
    if "username" in st.session_state:
        st.sidebar.success(f"„É≠„Ç∞„Ç§„É≥‰∏≠: {st.session_state['username']}")
        if st.sidebar.button("„É≠„Ç∞„Ç¢„Ç¶„Éà"):
            for k in ("username","folder_id","is_admin"): st.session_state.pop(k, None)
            st.sidebar.info("„É≠„Ç∞„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„ÄÇ")
        return
    u = st.sidebar.text_input("„É¶„Éº„Ç∂„ÉºÂêç", key="login_user")
    p = st.sidebar.text_input("„Éë„Çπ„ÉØ„Éº„Éâ", type="password", key="login_pass")
    if st.sidebar.button("„É≠„Ç∞„Ç§„É≥"):
        df = users_df.copy()
        df["username"] = df["username"].str.strip()
        df["password"] = df["password"].str.strip()
        m = df[(df["username"]==u.strip()) & (df["password"]==p.strip())]
        if not m.empty:
            st.session_state["username"] = u.strip()
            st.session_state["folder_id"] = m.iloc[0]["folder_id"]
            st.session_state["is_admin"] = (u.strip()=="admin")
            st.sidebar.success("„É≠„Ç∞„Ç§„É≥ÊàêÂäü")
        else:
            st.sidebar.error("Ë™çË®ºÂ§±Êïó")

# ========================
# Geocoding + „Åµ„Çä„Åå„Å™Â§âÊèõ
# ========================
def search_location_info(place_name):
    key = st.secrets["google_maps"]["api_key"]
    url = f"https://maps.googleapis.com/maps/api/geocode/json?address={place_name}&language=ja&key={key}"
    data = requests.get(url).json()
    if data.get("status")!="OK":
        return "", "", ""
    r = data["results"][0]
    return r["formatted_address"], r["geometry"]["location"]["lat"], r["geometry"]["location"]["lng"]

def convert_to_furigana(text):
    k = kakasi()
    k.setMode("H","a"); k.setMode("K","a"); k.setMode("J","a")
    return k.getConverter().do(text)

# ========================
# ÁîªÂÉèË£úÊ≠£„ÉªÂúßÁ∏Æ
# ========================
def enhance_image(img,b,c,col):
    img = ImageEnhance.Brightness(img).enhance(b)
    img = ImageEnhance.Contrast(img).enhance(c)
    img = ImageEnhance.Color(img).enhance(col)
    return img

def compress_image(img,max_bytes):
    buf = BytesIO(); q=95
    while q>=10:
        buf.seek(0); buf.truncate()
        img.save(buf,format="JPEG",quality=q,optimize=True)
        if buf.tell()<=max_bytes:
            return buf
        q-=5
    return None

# ========================
# FC„Çµ„Ç§„ÉàËá™ÂãïÁôªÈå≤
# ======================
def run_fc_registration(user, pwd, headless, session_dir, metadata):
    import os, time
    from selenium import webdriver
    from selenium.webdriver.chrome.service import Service as ChromeService
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC

    options = webdriver.ChromeOptions()
    if headless:
        options.add_argument("--headless=new")
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")

    driver = webdriver.Chrome(
        service=ChromeService(executable_path=st.secrets["selenium"][CHROMEDRIVER_SECRET_KEY]),
        options=options
    )
    wait = WebDriverWait(driver, 40)

    try:
        # 1) „É≠„Ç∞„Ç§„É≥
        driver.get(f"{FC_BASE_URL}/login.php")
        wait.until(EC.visibility_of_element_located((By.NAME, "login_id"))).send_keys(user)
        driver.find_element(By.NAME, "password").send_keys(pwd)
        driver.find_element(By.NAME, "login").click()

        # 2) Êñ∞Ë¶èÁôªÈå≤„Éö„Éº„Ç∏„Å∏
        driver.get(f"{FC_BASE_URL}/location/?mode=detail&id=0")
        wait.until(EC.presence_of_element_located((By.NAME, "name_ja")))

        # 2.1) ÁîªÂÉèÁôªÈå≤„É¢„Éº„ÉÄ„É´„ÇíÈñã„ÅÑ„Å¶ÂÖ®ÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
        btn_add = wait.until(EC.element_to_be_clickable(
            (By.CSS_SELECTOR, "button[data-toggle='modal'][data-target='#modal-img-add']")
        ))
        driver.execute_script("arguments[0].scrollIntoView(true);", btn_add)
        driver.execute_script("arguments[0].click();", btn_add)

        file_input = wait.until(EC.presence_of_element_located((By.ID, "InputFile")))
        # ÂúßÁ∏ÆÊ∏à„ÅøÁîªÂÉè„Çí„Åô„Åπ„Å¶ÈÅ∏Êäû
        paths = [
            os.path.abspath(os.path.join(session_dir, fn))
            for fn in os.listdir(session_dir)
            if fn.startswith("compressed_") and fn.lower().endswith((".jpg", ".jpeg", ".png"))
        ]
        file_input.send_keys("\n".join(paths))

        # „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„É™„Çπ„ÉàÊï∞„ÇíÂæÖÊ©ü
        expected_count = len(paths)
        wait.until(lambda d: len(d.find_elements(By.CSS_SELECTOR, "#files li.media")) >= expected_count)

        # ÂÆå‰∫Ü„Çπ„ÉÜ„Éº„Çø„Çπ„ÅåÊèÉ„ÅÜ„Åæ„ÅßÁÑ°Âà∂Èôê„É´„Éº„Éó
        while True:
            bars = driver.find_elements(By.CSS_SELECTOR, "#files li.media .progress-bar")
            statuses = driver.find_elements(By.CSS_SELECTOR, "#files li.media .status")
            if (len(bars) >= expected_count and len(statuses) >= expected_count
                and all(bar.get_attribute("aria-valuenow") == "100" for bar in bars)
                and all("Complete" in status.text for status in statuses)):
                break
            time.sleep(0.5)

        # „É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
        close_add = driver.find_element(By.CSS_SELECTOR, "#modal-img-add button[data-dismiss='modal']")
        driver.execute_script("arguments[0].click();", close_add)

        # 3) Âú∞ÂêçÔºè„Åµ„Çä„Åå„Å™ÔºèÊâÄÂú®Âú∞ ÂÖ•Âäõ
        for field_name, value in [
            ("name_ja",    metadata.get("place", "")),
            ("name_kana",  metadata.get("furigana", "")),
            ("place_ja",   metadata.get("address", ""))
        ]:
            el = driver.find_element(By.NAME, field_name)
            driver.execute_script("arguments[0].scrollIntoView(true);", el)
            el.clear()
            el.send_keys(value)

        # 4) Á∑ØÂ∫¶ÁµåÂ∫¶ÂèñÂæó
        btn_geo = driver.find_element(By.ID, "btn-g-search")
        driver.execute_script("arguments[0].scrollIntoView(true);", btn_geo)
        driver.execute_script("arguments[0].click();", btn_geo)
        wait.until(lambda d: d.find_element(By.NAME, "lat").get_attribute("value") != "")

        # 5) Ê¶ÇË¶Å
        desc_el = driver.find_element(By.ID, "entry-description-ja")
        driver.execute_script("arguments[0].scrollIntoView(true);", desc_el)
        desc_el.clear()
        desc_el.send_keys(metadata.get("description", ""))

        # 6) ÈùûÂÖ¨Èñã„Éï„É©„Ç∞
        sel = driver.find_element(By.NAME, "activated")
        for opt in sel.find_elements(By.TAG_NAME, "option"):
            if opt.get_attribute("value") == "0":
                driver.execute_script("arguments[0].scrollIntoView(true);", opt)
                opt.click()
                break

        # 7) „É°„Ç§„É≥ÁîªÂÉèÈÅ∏Êäû
        main_file = metadata.get("main_file")
        if main_file:
            btn_main = wait.until(EC.element_to_be_clickable((By.ID, "select-main-img")))
            driver.execute_script("arguments[0].scrollIntoView(true);", btn_main)
            driver.execute_script("arguments[0].click();", btn_main)
            wait.until(EC.visibility_of_element_located((By.ID, "modal-img-select")))
            time.sleep(0.5)
            for box in driver.find_elements(By.CSS_SELECTOR, "#modal-img-select .select-img-box"):
                if main_file in box.text:
                    link = box.find_element(By.CSS_SELECTOR, "a.select-img-vw")
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", link)
                    time.sleep(0.5)
                    driver.execute_script("arguments[0].click();", link)
                    break
            # driver.find_element(By.CSS_SELECTOR, "#modal-img-select button[data-dismiss='modal']").click()
            time.sleep(8)

        sub_files = metadata.get("sub_files") or []
        if sub_files:
       

            for fname in sub_files:
                # „ÄåÁîªÂÉèÈÅ∏Êäû„Äç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„É¢„Éº„ÉÄ„É´Ë°®Á§∫
                btn_sub = wait.until(EC.element_to_be_clickable((By.ID, "select-sub-img")))
                driver.execute_script("arguments[0].scrollIntoView(true);", btn_sub)
                btn_sub.click()
                time.sleep(5)

                # „É¢„Éº„ÉÄ„É´„ÅåÈñã„Åã„Çå„ÄÅÊ§úÁ¥¢Áî®ÂÖ•ÂäõÊ¨Ñ„ÅåË°®Á§∫„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
                wait.until(EC.visibility_of_element_located((By.ID, "modal-img-select")))
                time.sleep(5)




                # ‚ë† Ê§úÁ¥¢Ë™û„ÇíÂÖ•Âäõ
                input_search = wait.until(EC.presence_of_element_located((By.ID, "search-file-name")))
                driver.execute_script("arguments[0].scrollIntoView(true);", input_search)
                input_search.clear()
                input_search.send_keys(fname)

                # ‚ë° Ê§úÁ¥¢ÂÆüË°å„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
                btn_search = driver.find_element(By.ID, "search-img")
                driver.execute_script("arguments[0].scrollIntoView(true);", btn_search)
                btn_search.click()

                # ‚ë¢ Ê§úÁ¥¢ÁµêÊûú„ÅåËøî„Å£„Å¶„Åè„Çã„ÅÆ„ÇíÂæÖÊ©ü
                #    `.select-img-box` „ÅåÂ∞ë„Å™„Åè„Å®„ÇÇ 1 ‰ª∂Ë°®Á§∫„Åï„Çå„Çã„Åæ„ÅßÂæÖ„Å§
                wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, "#modal-img-select .select-img-box")))
                time.sleep(8)

                # ‚ë£ ‰∏Ä‰ª∂ÁõÆ„ÅÆ„ÄåÈÅ∏Êäû„Äç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
                first_box = driver.find_elements(By.CSS_SELECTOR, "#modal-img-select .select-img-box")[0]
                link = first_box.find_element(By.CSS_SELECTOR, "a.select-img-vw")
                driver.execute_script("arguments[0].scrollIntoView(true);", link)
                link.click()

                # Ê§úÁ¥¢Ë™û„Çí„ÇØ„É™„Ç¢„Åó„Å¶„ÄÅÊ¨°„ÅÆÂë®Ëæ∫ÁîªÂÉè„ÅÆÊ§úÁ¥¢„Å´ÂÇô„Åà„Çã
                input_search.clear()
                time.sleep(5)

            # ‚ë§ ÂÖ®‰ª∂ÈÅ∏Êäû„ÅåÁµÇ„Çè„Å£„Åü„Çâ„ÄåÈñâ„Åò„Çã„Äç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
            # close_sub = driver.find_element(By.CSS_SELECTOR, "#modal-img-select button[data-dismiss='modal']")
            # driver.execute_script("arguments[0].click();", close_sub)


        # # „É¢„Éº„ÉÄ„É´ÂÜÖ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÅåË°®Á§∫„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
        # wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, "input.category-modal-select")))
        # boxes = driver.find_elements(By.CSS_SELECTOR, "input.category-modal-select")
        # target = next((cb for cb in boxes if cb.get_attribute("value") == "133"), None)
        # if not target and boxes:
        #     target = boxes[0]
        # if target:
        #     driver.execute_script("arguments[0].scrollIntoView(true);", target)
        #     target.click()

        # # „É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
        # close_cat = driver.find_element(By.CSS_SELECTOR, "button[data-dismiss='modal'], .btn-cls")
        # driver.execute_script("arguments[0].click();", close_cat)

        # driver.find_element(By.CSS_SELECTOR, "#modal-img-select button[data-dismiss='modal']").click()

        # 9) „Ç´„ÉÜ„Ç¥„É™ÈÅ∏Êäû
        btn_cat =wait.until(EC.element_to_be_clickable((By.ID, "select-category-btn")))
        time.sleep(3)
        driver.execute_script("arguments[0].scrollIntoView(true);", btn_cat)
        btn_cat.click()
        time.sleep(8)
        wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, "input.category-modal-select")))
        time.sleep(3)
        cbs = driver.find_elements(By.CSS_SELECTOR, "input.category-modal-select")
        target = next((cb for cb in cbs if cb.get_attribute("value") == "133"), None)
        if not target and cbs:
            target = cbs[0]
        if target:
            driver.execute_script("arguments[0].scrollIntoView(true);", target)
            driver.execute_script("arguments[0].click();", target)
        # driver.find_element(By.CSS_SELECTOR, "button[data-dismiss='modal'], .btn-cls").click()

        # 10) ‰øùÂ≠ò
        save_btn = wait.until(EC.element_to_be_clickable((By.ID, "save-btn")))
        driver.execute_script("arguments[0].scrollIntoView(true);", save_btn)
        driver.execute_script("arguments[0].click();", save_btn)
        wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".alert-success")))

    except Exception as e:
        st.error(f"‚ùå Ëá™ÂãïÁôªÈå≤‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
        raise

    finally:
        if headless:
            driver.quit()
        else:
            st.info("„Éò„ÉÉ„Éâ„É¨„ÇπOFF „ÅÆ„Åü„ÇÅ„ÄÅ„Éñ„É©„Ç¶„Ç∂„ÅåÈñã„ÅÑ„Åü„Åæ„Åæ„Åß„Åô„ÄÇ")

# ========================
# „É°„Ç§„É≥
# ========================
def main():
    st.set_page_config(page_title="ÁîªÂÉèÂúßÁ∏ÆÔºãÂú∞ÂêçÊÉÖÂ†±ÂèñÂæó", layout="wide")
    st.title("üì∑ ÁîªÂÉèÂúßÁ∏ÆÔºãÂú∞ÂêçÊÉÖÂ†±ÂèñÂæó„Ç¢„Éó„É™")

    # Drive & users
    service = get_drive_service()
    users_df,_ = load_users(service, st.secrets["folders"]["admin_folder_id"])
    if users_df is None:
        st.error("users.csv „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"); return

    login(users_df)
    if "username" not in st.session_state: st.stop()

    # FC-site Ë®≠ÂÆö
    st.sidebar.header("‚öôÔ∏è FC„Çµ„Ç§„ÉàË®≠ÂÆö")
    fc_user = st.sidebar.text_input("FC „É≠„Ç∞„Ç§„É≥ID")
    fc_pass = st.sidebar.text_input("FC „Éë„Çπ„ÉØ„Éº„Éâ", type="password")
    headless= st.sidebar.checkbox("„Éò„ÉÉ„Éâ„É¨„ÇπÂÆüË°å",value=True)

    # Drive ÁîªÂÉè„Éï„Ç©„É´„ÉÄ
    folder_id = st.text_input("üìÅ Google Drive „Éï„Ç©„É´„ÉÄID„ÇíÂÖ•Âäõ")
    if not folder_id: st.stop()
    files = service.files().list(
        q=f"'{folder_id}' in parents and mimeType contains 'image/' and trashed=false",
        fields="files(id,name)"
    ).execute().get("files",[])
    if not files: st.warning("ÁîªÂÉè„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"); return

    # Âü∫Êú¨ÊÉÖÂ†±
    place    = st.text_input("Âú∞ÂêçÔºàÊº¢Â≠óÔºâ")
    furigana = st.text_input("„Åµ„Çä„Åå„Å™")
    desc     = st.text_area("Ê¶ÇË¶Å","")
    max_kb   = st.sidebar.number_input("üîß ÂúßÁ∏ÆÂæåÊúÄÂ§ßKB",50,2048,2000)
    max_bytes= max_kb * 1024

    # ÁîªÂÉè„Éó„É¨„Éì„É•„ÉºÔºÜË®≠ÂÆö
    st.header("üñºÔ∏è ÁîªÂÉèÈÅ∏Êäû„ÉªË£úÊ≠£")
    select_all=st.checkbox("„Åô„Åπ„Å¶ÈÅ∏Êäû")
    settings={}
    os.makedirs("data",exist_ok=True)
    for f in files:
        fid,name = f["id"],f["name"]
        path=os.path.join("data",name)
        with open(path,"wb") as fp: fp.write(service.files().get_media(fileId=fid).execute())
        img=Image.open(path)
        b=st.slider(f"Êòé„Çã„Åï[{name}]",0.5,2.0,1.2,0.1,key=f"b_{name}")
        c=st.slider(f"„Ç≥„É≥„Éà„É©„Çπ„Éà[{name}]",0.5,2.0,1.2,0.1,key=f"c_{name}")
        col=st.slider(f"ÂΩ©Â∫¶[{name}]",0.5,2.0,1.3,0.1,key=f"col_{name}")
        en=enhance_image(img.copy(),b,c,col)
        c1,c2=st.columns(2)
        with c1: st.image(img,caption="ÂÖÉ",use_container_width=True)
        with c2: st.image(en,caption="Ë£úÊ≠£",use_container_width=True)
        main=st.checkbox("„É°„Ç§„É≥„Åß‰Ωø„ÅÜ",key=f"main_{name}")
        sel=st.checkbox("ÈÅ∏Êäû",key=f"sel_{name}",value=select_all)
        settings[name]={"b":b,"c":c,"col":col,"main":main,"sel":sel}

    if st.button("üîç ÂúßÁ∏Æ‚ÜíÊ§úÁ¥¢‚ÜíDrive‰øùÂ≠ò‚ÜíËá™ÂãïÁôªÈå≤"):
        # ‰∏ÄÊôÇ„Éá„Ç£„É¨„ÇØ„Éà„É™
        session_dir=f"output/{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        os.makedirs(session_dir,exist_ok=True)

        # ‰ΩèÊâÄÊ§úÁ¥¢
        addr,lat,lng=search_location_info(place)
        metadata={"place":place,"furigana":furigana,"description":desc,
                  "address":addr,"lat":lat,"lng":lng}

        # ÂúßÁ∏ÆÔºÜ„Éï„Ç°„Ç§„É´„É™„Çπ„Éà
        sub_files=[]; main_file=None
        for f in files:
            name=f["name"]; s=settings[name]
            if not s["sel"]: continue
            img=Image.open(os.path.join("data",name))
            en=enhance_image(img,s["b"],s["c"],s["col"])
            buf=compress_image(en,max_bytes)
            out=f"compressed_{name}"
            if buf:
                with open(os.path.join(session_dir,out),"wb") as fp: fp.write(buf.getvalue())
                sub_files.append(out)
                if s["main"]: main_file=out

        metadata["main_file"]=main_file
        metadata["sub_files"]=sub_files

        # CSV ‰ΩúÊàê
        csv_path=os.path.join(session_dir,"metadata.csv")
        pd.DataFrame([metadata]).to_csv(csv_path,index=False)

        # Google Drive „Å´„ÉÅ„É£„É≥„ÇØ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
        new_fid,new_name=create_timestamped_folder(service,folder_id)
        st.info(f"‚ñ∂ „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÖà: {new_name}")
        for fn in os.listdir(session_dir):
            fp=os.path.join(session_dir,fn)
            mime="image/jpeg" if fn.lower().endswith((".jpg",".jpeg")) else "text/csv"
            media=MediaIoBaseUpload(open(fp,"rb"),mimetype=mime,
                                   resumable=True, chunksize=1024*1024)
            req=service.files().create(body={"name":fn,"parents":[new_fid]},
                                       media_body=media)
            uploaded=False
            with st.spinner(f"Uploading {fn}..."):
                while not uploaded:
                    status,resp=req.next_chunk()
                    if status:
                        st.write(f"  {fn}: {int(status.progress()*100)}%")
                    if resp:
                        uploaded=True
            st.success(f"  ‚úÖ {fn} uploaded")

        st.success("üéâ Drive „Å∏„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü")

        # FC Ëá™ÂãïÁôªÈå≤
        try:
            run_fc_registration(fc_user,fc_pass,headless,session_dir,metadata)
            st.success("‚úÖ FC„Çµ„Ç§„ÉàËá™ÂãïÁôªÈå≤ÂÆå‰∫Ü")
        except Exception:
            st.error("‚ùå Ëá™ÂãïÁôªÈå≤‰∏≠„Å´„Ç®„É©„ÉºÁô∫Áîü")

        # „É≠„Éº„Ç´„É´ÂâäÈô§
        shutil.rmtree(session_dir)

if __name__=="__main__":
    main()
